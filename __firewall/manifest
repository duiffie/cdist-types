#!/bin/bash

exec > /tmp/firewall.log 2>&1
set -x

set -e

error() {
   ( >&2 "Error: $1" )
   exit 1
}

readdb() {
   declare -g -A services hosts networks hostgroups networkgroups

   while IFS='=' read var val; do
      if [[ $var == \[*] ]]; then
         section="${var:1:-1}"
      elif [[ $val ]]; then
         test "${val:0:1}" = "@" && val="$(bash -c "${val:1}")"
         declare -g -A "$section[$var]=$val"
      fi
   done < <(grep -v "^#" "$1")
}

readconfig() {
   local var varstrip val section rulesfile tables=" filter nat mangle filter4 nat4 mangle4 filter6 nat6 mangle6"
   local globalkeys=" policy established icmp proto log loopback packageinstall "

   while IFS='=' read var val; do
      if [[ $var == \[*] ]]; then
          section="${var:1:-1}"
          section="${section// /_}"
          if test "$section" != "global";then
             if test "${section:0:1}" = "#"; then
		rulesfile="${section:1}"
		! test -e "${includedir}/${rulesfile}" && error "Unable to file include file $rulesfile"
		readconfig "${includedir}/${rulesfile}"
	     else
                [[ " ${sections[@]} " =~ " ${section} " ]] && error "Section ${section} redefined in file $rulesfile"
	        sections+=( "$section" )
	     fi
	  fi
          itemcount=1
      elif [[ $val ]]; then
          if test "$section" = "global"; then
	     varstrip="${var/_*/}"
             test "${globalkeys/$varstrip/}" = "${globalkeys}" &&
                error "Unknown key ${var} in section global."
             declare -g -A "$section[$var]=$val"
          else
             test "${tables/$var/}" = "${tables}" &&
                error "Unknown table ${var} in section $section."
             declare -g -A "$var[${itemcount}%${section}]=$val"
             itemcount=$(( itemcount + 1 ))
          fi
      fi
   done < <(grep -v "^#" "$1")
}

genrule() {
   ipv="$1"
   rul="$2"
   echo "$3" >> "${rulesipt}-${ipv}-${rul}"
}

doexpand() {
   hostlookup() {
      local key val
      key="$1"
      t="A"
      test "$proto" = "6" && t="AAAA"

      val="${hosts[$key]}"
      test "$val" != "" && { echo "$val"; return; }
      [[ "$key" =~ ^(([0-9]{1,3}\.){3}[0-9]{1,3}(\/[0-9]{1,2})?)$ ]] && { echo "$key"; return; }
      val="$( dig +short +search "$key" "$t" | tail -1)"
      test "$val" = "" && error "Could not find host ${key}"
      echo "$val"
   }

   group() {
      local itype="$1"
      local name="${ipv}-${itype}-$2"
      local create="${rulesipt}-ipset-create"
      local items="${rulesipt}-ipset-items"

      ! test -e "$create" && touch "$create"
      grep "^# ${name}$" "$create" > /dev/null && return

      local inet="inet"
      test "$ipv" = "6" && inet="inet6"
      { echo "# ${name}"
        echo "ipset create -exist ${name} hash:${itype} family ${inet}"
      } >> "$create"
      echo "flush ${name}" >> "$items"
      for item in ${expanded}; do
         echo "add ${name} ${item}" >> "$items"
      done
   }

   expanded="$1"
   local item="$1" functiontype args lookuptable
   test "${item/(/}" = "${item}" && { echo "$item"; return 0; }
   functiontype="${item/(*)/}"
   args="${item/*(/}"
   args="${args/)/}"
   case "$functiontype" in
      "reject")
         case "$args" in
            "reset") expanded="-j REJECT --reject-with tcp-reset" ;;
            "unreachable") expanded="-j REJECT --reject-with icmp-port-unreachable" ;;
            "prohibited") expanded="-j REJECT --reject-with icmp-admin-prohibited" ;;
            *) error "Unknown reject type $args" ;;
         esac ;;
      "log") expanded="${LOG}${args//%/ } \""; logging=1 ;;
      "service")
         test "${services[$args]}" = "" && error "Service port $args not found."
         expanded="${services[$args]/\/*/}" ;;
      "dservice")
         test "${services[$args]}" = "" && error "Destination service $args not found."
         expanded="-p ${services[$args]/*\//} --dport ${services[$args]/\/*/}" ;;
      "host")
         expanded="$(hostlookup "$args")" ;;
      "hosts")
         unset expanded
         for host in ${args//,/ }; do
            expanded="$expanded,$(hostlookup "$host")"
         done
         expanded="${expanded:1}" ;;
      "hostgroup")
         unset expanded
         test "${hostgroups[$args]}" = "" && error "Hostgroup $args not found."
         for host in ${hostgroups[$args]//,/ }; do
            expanded="$expanded $(hostlookup "$host")"
         done
         group ip "$args"
         expanded="-m set --match-set ${ipv}-ip-${args}" ;;
      "network")
         test ${networks[$args]} = "" && error "Network $args not found."
         expanded="${networks[$args]}" ;;
      "networkgroup")
         unset expanded
         test "${networkgroups[$args]}" = "" && error "Networkgroup $args not found."
         for network in ${networkgroups[$args]//,/ }; do
            test "${networks[$network]}" = "" && error "Networkgroup $args, network $network not found."
            expanded="$expanded ${networks[$network]}"
         done
         group net "$args"
         expanded="-m set --match-set ${ipv}-net-${args}" ;;
      *) error "Unknown function $functiontype"
   esac
}

# Sanity check
cmds=( "dig" )
for cmd in "${cmds[@]}"; do
   type "$cmd" > /dev/null 2>&1 || error "Missing command $cmd"
done

state="$(cat "$__object/parameter/state")"
os=$(cat "$__global/explorer/os")

ULOG=1
LOG="-j NFLOG --nflog-prefix \""
case "$os" in
"redhat")
   LOG="-j LOG --log-prefix \"firewall: "
   ULOG=0
;;
esac

# Process absent state
if test "$state" = "absent"; then
   __systemd_unit firewall.service --state absent
   require="__systemd_unit/firewall.service" __file /usr/local/bin/firewall --state absent
   require="__systemd_unit/firewall.service" __file /etc/firewall/firewall-ipv4.fw --state absent
   require="__systemd_unit/firewall.service" __file /etc/firewall/firewall-ipv6.fw --state absent
   test "${global[packageinstall]}" != "false" -a "$ULOG" -eq 1 && require="__systemd_unit/firewall.service" __package ulogd2 --state absent
   test "$ULOG" -eq 0 && __file /etc/rsyslog.d/firewall.conf --state absent
   exit 0
fi

test -f "$__object/parameter/rules" || error "No rules specified."
rules="$(cat "$__object/parameter/rules")"
test -f "$__object/parameter/db" && db="$(cat "$__object/parameter/db")"
test -f "$__object/parameter/includedir" && includedir="$(cat "$__object/parameter/includedir")"

# Read rules
sections=()
readconfig "$rules"
test -n "$db" && readdb "$db"

rulesipt="$(mktemp)"
rm -f "$rulesipt"

test "${global[proto]}" = "" && protos=( 4 )
test "${global[proto]/4/}" != "${global[proto]}" && protos+=( 4 )
test "${global[proto]/6/}" != "${global[proto]}" && protos+=( 6 )

# Flush any rules before installing
for proto in "${protos[@]}"; do
   for chain in INPUT OUTPUT FORWARD; do
      genrule $proto filter "-F $chain"
   done
done

# Allow related and established
test "${global[established]}" = "true" &&
   for proto in "${protos[@]}"; do
      genrule $proto filter "-A INPUT -m state --state RELATED,ESTABLISHED -m comment --comment \"Allow related and established\" -j ACCEPT"
   done

# Always block icmp at top of ruleset
test "${global[icmp]}" = "false" &&
   for proto in "${protos[@]}"; do
      genrule $proto filter "-A INPUT -p icmp -j DROP -m comment --comment \"Drop icmp\""
   done

# Process rules
declare -A tables=([4]="filter nat mangle filter4 nat4 mangle4"
                   [6]="filter6 nat6 mangle6" )
logging=0
for section in "${sections[@]}"; do
   for proto in "${protos[@]}"; do
      for table in ${tables[$proto]}; do
         for sectionref in $(eval "printf \"%s\n\" \${!$table[@]}" | sort -t% -n); do
            test "${sectionref/*\%/}" != "$section" && continue
            ref="${table}[$sectionref]"
            if test -n "${!ref}"; then
               rule=""
               line="${!ref}"
               while test "${#line}" -gt 0; do
                  expansion="$(echo "$line" | sed 's/\(^\|[^(]*[ .:-;]\)\([^( .:-;]\+([^)]\+)\).*/\2/; /.*[(].*/!d')"
                  test "$expansion" = "" && { rule="${rule}${line}"; break; }
                  rest=${line#*$expansion}
                  pos=$(( ${#line} - ${#rest} - ${#expansion}))
                  doexpand "${expansion}"
                  rule="${rule}${line:0:$pos}${expanded}"
                  line="${line:$(( pos + ${#expansion}))}"
               done
               genrule $proto ${table/[46]/} "${rule} -m comment --comment \"${section//_/ }\""
            fi
         done
      done
   done
done

# Always allow icmp at bottom of ruleset
test "${global[icmp]}" = "true" &&
   for proto in "${protos[@]}"; do
      genrule $proto filter "-A INPUT -p icmp -j ACCEPT -m comment --comment \"Allow icmp\""
   done

# Setup logging
test -n "${global[log]}" &&
   for proto in "${protos[@]}"; do
      genrule $proto filter "-A INPUT -p icmp -j ACCEPT -m comment --comment \"Allow icmp\""
   done

# Set policy, default = accept and set any logging
policy="${global[policy]:-accept}"
for proto in "${protos[@]}"; do
   for chain in input output forward; do
      chainpolicy="${global[policy_$chain]:-$policy}"
      test "${chainpolicy^^}" != "ACCEPT" -a "${chainpolicy^^}" != "DROP" &&
         error "Policy for chain can only be accept or drop."
      genrule $proto filter "-P ${chain^^} ${chainpolicy^^}"
      if test "${chainpolicy^^}" = "DROP" -a "${global[loopback]}" != "false"; then
         case "${chain^^}" in
            "INPUT") genrule $proto filter "-I ${chain^^} -i lo -j ACCEPT -m comment --comment \"Allow loopback\"" ;;
            "OUTPUT") genrule $proto filter "-I ${chain^^} -o lo -j ACCEPT -m comment --comment \"Allow loopback\"" ;;
         esac
      fi
      log="${global[log_$chain]}"
      test -z "$log" && log="${global[log]}"
      test -n "$log" && {
         #genrule $proto filter "-A ${chain^^} -j NFLOG --nflog-prefix \"$log \""
         genrule $proto filter "-A ${chain^^} ${LOG}$log \""
         logging=1
      }
   done
done

export CDIST_ORDER_DEPENDENCY=1

# Generate ip[6]tables-restore files
__directory /etc/firewall --owner root --group root --mode 700 --state present
for proto in "${protos[@]}"; do
   for table in filter mangle nat; do
      if test -e "${rulesipt}-${proto}-${table}"; then
         ( echo "*${table}"
           cat "${rulesipt}-${proto}-${table}"
           rm -f "${rulesipt}-${proto}-${table}"
           echo "COMMIT"
         ) >> "${rulesipt}-${proto}"
      fi
   done
   test -e "${rulesipt}-${proto}" && 
      __file /etc/firewall/firewall-ipv${proto}.fw \
         --owner root --group root --mode 0400 --source - < "${rulesipt}-${proto}"
done
# Generate ipset files
ipset=0
for ipset in ipset-create ipset-items; do
   if test -e "${rulesipt}-${ipset}"; then
      __file /etc/firewall/${ipset} \
         --owner root --group root --mode 0400 --source - < "${rulesipt}-${ipset}"
     ipset=1
   fi
done
test "$ipset" = "1" && __package ipset

# Distribute restore files and install or remove software and service
if test -e "${rulesipt}-4" -o -e "${rulesipt}-6"; then
   test "${global[packageinstall]}" != "false" && __package iptables
   __file /usr/local/bin/firewall \
      --owner root --group root --mode 0700 --source "${__type}/files/firewall"
   __systemd_unit firewall.service \
      --source "${__type}/files/firewall.service" \
      --enablement-state enabled
   __check_messages firewall \
      --pattern '^__file/etc/firewall/' \
      --execute "systemctl restart firewall.service"
   rm -f "${rulesipt}"-*
fi
if test "$logging" = 0; then
   test "${global[packageinstall]}" != "false" -a "$ULOG" -eq 1  && __package ulogd2 --state absent
   test "$ULOG" -eq 0 && __file /etc/rsyslog.d/firewall.conf --state absent
else
   test "${global[packageinstall]}" != "false" -a "$ULOG" -eq 1 && __package ulogd2 --state present
   test "$ULOG" -eq 0 && __file /etc/rsyslog.d/firewall.conf \
      --owner root --group root --mode 0644 --source "${__type}/files/rsyslog" --onchange 'service rsyslog restart' --state present
fi
unset CDIST_ORDER_DEPENDENCY
